#!/usr/bin/env python3
"""A C to Verilog compiler - Command line interface"""

__author__ = "Jon Dawson"
__copyright__ = "Copyright (C) 2020, Jonathan P Dawson"
__version__ = "0.1"

import argparse
import runpy

from baremetal import *

import chips_v.c_compile
from chips_v.soc import Soc
from chips_v.default_spec import default_settings

#create command line argument parser
parser = argparse.ArgumentParser()
parser.add_argument("--binfile", action="store_true", help="Don't compile C use a pre-compiled binary instead")
parser.add_argument("--machine_spec", help="Supply a python file containing a custom machine spec")
parser.add_argument("output_file")
parser.add_argument("input_files", nargs="+")
args = parser.parse_args()

#load custom machine architecture if requested
if args.machine_spec:
    settings = runpy.run_path(args.machine_spec)
else:
    settings = default_settings

#compile file
if args.binfile:
    instructions = chips_v.c_compile.read_binfile(args.input_files[0])
else:
    instructions = chips_v.c_compile.c_compile(args.input_files, settings)

clk = Clock("clk")
soc = Soc(clk, settings["memory_size"], instructions, settings)

#generate verilog
soc.generate_verilog(args.output_file)
