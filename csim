#!/usr/bin/env python3
"""A C to Verilog compiler - Command line interface"""

__author__ = "Jon Dawson"
__copyright__ = "Copyright (C) 2020, Jonathan P Dawson"
__version__ = "0.1"

import argparse
import runpy

from baremetal import *

import chips_v.c_compile
from chips_v.soc import Soc
from chips_v.generate_header import generate_header

#create command line argument parser
parser = argparse.ArgumentParser()
parser.add_argument("input_files", nargs="*")
parser.add_argument("--binfile")
parser.add_argument("--ram_size", default=8*1024)
parser.add_argument("--machine_spec")
parser.add_argument("--cycles", default=10000, help="number of clock cycles to simulate")
parser.add_argument("--debug_text", action="store_true", help="print state of cpu and soc signals each clock")
parser.add_argument("--verbose", action="store_true", help="print cpu status each clock")
parser.add_argument("--print_memory", action="store_true", help="print memory accesses")
args = parser.parse_args()

#generate header
generate_header(args.machine_spec)

#compile file
if args.binfile:
    instructions = chips_v.c_compile.read_binfile(args.binfile)
else:
    instructions = chips_v.c_compile.c_compile(args.input_files)

clk = Clock("clk")
settings = runpy.run_path(args.machine_spec)
soc = Soc(clk, args.ram_size, instructions, settings)
soc.simulate(10000, args.debug_text, args.verbose, args.print_memory)
